# Generated by Django 4.0.2 on 2022-09-12 07:19

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('scholarships', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('post_code', models.IntegerField(default=4000)),
                ('year_of_birth', models.IntegerField(default=1990)),
                ('gender', models.CharField(choices=[('AN', 'Any'), ('FE', 'Female'), ('MA', 'Male'), ('NB', 'Non-Binary')], default='AN', max_length=2)),
                ('indigenous_status', models.CharField(choices=[('AN', 'Any'), ('AB', 'Aboriginal'), ('AT', 'Aboriginal Torres Strait Islander'), ('NB', 'Not ATSI')], default='AN', max_length=2)),
                ('vision_impairment', models.CharField(choices=[('AN', 'Any'), ('YE', 'Yes'), ('NO', 'No')], default='AN', max_length=2)),
                ('low_income', models.CharField(choices=[('AN', 'Any'), ('YE', 'Yes'), ('NO', 'No')], default='AN', max_length=2)),
                ('esol', models.CharField(choices=[('AN', 'Any'), ('YE', 'Yes'), ('NO', 'No')], default='AN', max_length=2)),
                ('duration', models.CharField(choices=[('AN', 'Any'), ('WO', 'Workshop'), ('BO', 'Boot Camp'), ('UG', 'Undergraduate')], default='AN', max_length=2)),
                ('education', models.CharField(choices=[('AN', 'Any'), ('HI', 'Highschool'), ('DI', 'Diploma'), ('BA', 'Bachelor'), ('PO', 'Post_Grad'), ('TE', 'Technical_College')], default='AN', max_length=2)),
                ('employment', models.CharField(choices=[('AN', 'Any'), ('UN', 'Unemployed'), ('PA', 'Part_Time'), ('FU', 'Full_Time'), ('CA', 'Casual')], default='AN', max_length=2)),
                ('industry', models.CharField(choices=[('AN', 'Any'), ('FI', 'Finance'), ('CO', 'Construction'), ('ED', 'Education'), ('FA', 'Farming_and_Animals'), ('HE', 'Healthcare_and_Medical'), ('HO', 'Hospitality_and_Tourism'), ('IC', 'ICT'), ('LE', 'Legal'), ('RE', 'Real_estate'), ('TR', 'Transport'), ('SE', 'Services_and_Trades')], default='AN', max_length=2)),
                ('favorites', models.ManyToManyField(blank=True, related_name='users', to='scholarships.Scholarships')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
